package com.drunk2013.spark.ml.feature

import org.apache.spark.SparkFunSuite
import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.util.MLlibTestSparkContext

/**
  * Created by shuangfu on 17-3-13.
  * Author : DRUNK
  * email :len1988.zhang@gmail.com
  */
class HashingTFLIBSuite extends SparkFunSuite with MLlibTestSparkContext {
  test("hashing tf on a single doc:") {
    val hashingTF = new HashingTFLIB(100)
    val doc = "a a b b c d".split(" ")
    val n = hashingTF.numFeatures
    println("number features:" + n)

    val termFreqs = Seq(
      (hashingTF.indexOf("a"), 2.0),
      (hashingTF.indexOf("b"), 2.0),
      (hashingTF.indexOf("c"), 1.0),
      (hashingTF.indexOf("d"), 1.0)
    )
    assert(termFreqs.map(_._1).forall(i => i >= 0 && i < n),
      s"index must be in the range [0,$n)")

    println(termFreqs)
    assert(termFreqs.map(_._1).toSet.size == 4, "expecting perfect hashing.")
    val expected = Vectors.sparse(n, termFreqs)
    println("sentence vector:" + expected)

    assert(hashingTF.transform(doc) === expected)

    println("doc to vector:")
    val doc1 = "a a b b c c d d"
    val vector1 = hashingTF.transform(doc1.split(" "))
    println(doc1 + "\nVecotor:" + vector1)
    val doc2 = "b a b a c c d d"
    val vector2 = hashingTF.transform(doc2.split(" "))
    println(doc2 + "\nVecotor:" + vector2)
    val distance = Vectors.sqdist(vector1, vector2)
    println("distance:" + distance)

  }

  test("hashing tf on an RDD") {
    val hashingTF = new HashingTFLIB()

  }


  test("test vector similarity:") {

    val str1 = "开心 0.320402 0.774705 -0.200367 -0.370631 -0.338369 -0.744996 -0.250797 0.803891 -0.591725 0.643692 -0.238931 -0.175512 0.525210 0.420848 -0.057830 0.324233 0.653498 -0.561226 0.431123 -0.081258 0.232545 -0.809666 0.223240 -0.136771 -0.414613 0.236466 -0.934705 0.031171 0.802482 0.126451 0.688700 0.441273 -1.216941 0.397876 -0.136145 -0.366737 -0.266539 -0.114235 -0.048866 -0.050915 -0.230388 0.217741 0.204333 0.177703 0.162848 0.061359 0.227121 0.052416 -0.417794 -0.458248 0.178044 -0.128222 -0.079467 -0.469269 -0.598556 0.973710 0.402790 0.467162 -0.312827 -0.220996 -0.458393 0.029261 0.189730 0.530631 -0.521624 0.260859 -0.171703 0.056295 -0.291514 0.278183 0.599075 -0.359458 -0.127773 -0.337469 0.234543 -0.671321 -1.387622 -0.317537 -0.624246 -0.543200 -0.165478 -0.274033 0.149218 -0.198050 0.049399 0.523312 -0.191711 -0.091336 0.736660 0.055668 -0.139966 0.112796 0.511916 0.412022 -0.023094 0.364011 0.043104 0.229925 -0.031841 0.024145"
    val name1 = str1.split(" ")(0)
    val v1 = Vectors.dense(str1.split(" ").drop(1).map(_.toDouble))
    println(s"[$name1] vector:$v1")
//    val str2 = "快乐 1.192644 0.744315 -0.450112 -0.037355 -0.884898 -0.668311 0.375734 0.515693 -0.152139 0.106673 0.311133 -0.877060 0.774305 0.006497 -0.448493 -0.111749 -1.297738 0.651316 -0.050255 0.095353 -1.685750 -1.056884 0.297946 -0.839218 0.064456 -0.114591 -0.249214 0.630175 0.141923 -0.259574 0.564730 0.372259 -1.807930 0.104707 0.114053 0.598200 0.577751 -1.189939 0.802797 -0.093206 -1.284628 -0.167647 0.250773 0.301872 0.494658 0.537509 -0.397810 -0.208875 -0.882249 -0.464430 0.584443 -0.946018 0.648893 -0.893905 0.000695 0.502682 0.967241 -0.032088 0.185024 -1.018275 -0.136583 -1.241734 -0.028118 1.136793 -1.407123 0.607280 -0.475720 0.319818 0.120518 0.700424 0.700643 0.435898 0.731893 -0.025672 -0.437564 -0.272646 -1.041340 -0.020355 -0.955254 -1.128592 0.517282 -0.888554 0.569334 1.026205 -0.116913 -0.090178 0.456010 0.421270 0.982535 0.874804 0.374234 0.333528 -0.798654 -0.088269 0.060043 0.467654 -0.290596 -0.364801 0.118050 0.503330"
    val str2 = "漂亮 0.119805 -0.488018 -0.045659 -0.586229 0.042617 -0.370186 -0.359278 0.336750 0.111584 0.958039 -0.008384 0.537372 0.003234 0.148861 -0.814669 0.038588 -0.165824 0.306883 -0.230930 -0.070835 0.118015 -0.523662 0.650473 -0.539890 -0.778166 0.131354 -0.446081 0.151529 -0.487034 0.480590 0.754703 -1.115257 -0.816481 0.628962 0.089738 0.172652 0.575114 -0.992819 -0.050394 -0.391968 -1.233873 -0.352877 0.170589 0.220902 -0.220584 -0.221832 -0.222937 -0.507669 -1.016831 -0.300637 -0.282095 -0.758638 -0.031032 0.116429 0.577985 -1.356924 0.658104 0.591413 -0.352420 -0.993911 -0.075833 -0.274236 -0.182454 -1.191142 -0.424546 -0.076803 0.082809 0.243750 0.170159 0.987280 1.459083 0.437873 -0.023951 0.217280 0.507000 -0.102520 -0.671712 -0.484736 -0.821172 0.100927 -0.031931 -0.349401 0.448617 0.423937 0.631220 0.577786 -0.205214 0.267976 1.192998 -0.105701 0.054365 0.475658 0.142781 0.211301 -0.247790 0.447296 0.229011 1.339919 -0.266052 -0.244175"
    val name2 = str2.split(" ")(0)
    val v2 = Vectors.dense(str2.split(" ").drop(1).map(_.toDouble))
    println(s"[$name2] vector:$v2")

    val distance = Vectors.sqdist(v1, v2)
    println(s"[$name1]--[$name2],distance:" + distance)

  }

}
